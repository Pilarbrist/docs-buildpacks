---
title: Staticfile Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='overview'></a> Overview

This topic describes how to configure the Staticfile buildpack and use it to push static content to the web.
It also shows you how to serve a simple "Hello World" page using the Staticfile buildpack.

<p class="note"><strong>Note</strong>: <a href="http://bosh.io/docs/trusted-certs.html">BOSH configured custom trusted certificates</a> are not supported by the Staticfile buildpack.</p>

### <a id='definitions'></a>Definitions

**Staticfile app**: An app or content that requires no backend code other than the NGINX webserver, which the buildpack provides.
Examples of staticfile apps are front-end JavaScript apps, static HTML content, and HTML/JavaScript forms.

**Staticfile buildpack**: The buildpack that provides runtime support for staticfile apps and apps with backends hosted elsewhere.
To find which version of NGINX the current Staticfile buildpack uses, see the [Staticfile buildpack release notes](https://github.com/cloudfoundry/staticfile-buildpack/releases).

### <a id='staticfile'></a>Staticfile Requirement

<%= vars.product_full %> requires a file named `Staticfile` in the root directory of the app. 
This file alerts <%= vars.product_short %> to use the Staticfile buildpack with the app.

The `Staticfile` can be an empty file or it can contain configuration settings for your app. 
For more information, see [Configuring the Buildpack and Pushing the App](#configure-and-push).

### <a id='memory'></a>Memory Usage

NGINX requires 20&nbsp;MB of RAM to serve static assets.
When using the Staticfile buildpack, we recommend pushing apps with the `-m 64M` option to reduce RAM allocation from the default 1&nbsp;GB allocated to containers by default.

### <a id='sample'></a>"Hello World" Tutorial

Follow the procedure below to create and push a single page app using the Staticfile buildpack.

<table border='1' class='nice'>
<tr>
  <th>Step</th><th>Action</th>
</tr>
<tr>
  <td valign="top">1</td>
  <td>Create and move into a root directory for the sample app in your workspace:
    <br>
<pre class="terminal">
$ mkdir sample
$ cd sample
</pre>
  </td>
</tr>
<tr>
  <td valign="top">2</td>
  <td>Create an <code>index.html</code> file that contains some text:
    <br>
<pre class="terminal">
$ echo 'Hello World' > index.html
</pre>
  </td>
</tr>
<tr>
  <td valign="top">3</td>
  <td> Create an empty file named <code>Staticfile</code>:
    <br>
<pre class="terminal">
$ touch Staticfile
</pre>
  </td>
</tr>
<tr>
  <td valign="top">4</td>
  <td> Use the <code>cf login</code> command to log in to
<%= vars.product_short %>.<br>
For more information, see the <a href="../../cf-cli/getting-started.html#login">Login</a> section of the <em>Getting Started with the cf CLI</em> documentation.
<pre class="terminal">
$ cf login
</pre>
 </td>
</tr>
<tr>
  <td valign="top">5</td>
  <td> Push the sample app:<br>
<pre class="terminal">
$ cf push hello -m 64M
</pre>
  </td>
</tr>
<tr>
  <td valign="top">6</td>
  <td>Find the URL of the app in the output.<br>
    A fragment of output is shown below:
<pre class='terminal'>
Creating app hello in org sample-org / space sample-space as username<span>@</span>example.com...
OK
&#8230;
requested state: started
instances: 1/1
usage: 64M x 1 instances
urls: hello.example.com
</pre>
  </td>
</tr>
<tr>
  <td valign="top">7</td>
  <td>Navigate to the URL to see the sample app running.
  </td>
</tr>
</table>

## <a id='configure'></a>Configuring the Buildpack

This section describes configuration options available for the Staticfile buildpack.

To configure these options, add the configuration property as a new line in your `Staticfile`, unless otherwise instructed below. 

<table border='1' class='nice'>
<tr>
  <th>Option</th>
  <th>Description</th>
  <th>Staticfile Configuration</th>
</tr>

<tr>
  <td id="root">Alternative root</td>
  <td>Specifies a root directory other than the default. Use this option to serve <code>index.html</code> and other assets, such as HTML, CSS, or JavaScript files, from a location other than the root directory. 
  For example, you can specify an alternate folder such as <code>dist/</code> or <code>public/</code>.</td>
 </td>
    <td><code>root: YOUR-DIRECTORY-NAME</code><br><br>
      For example:<br><code>root: public</code></td>
</tr>
<tr>
  <td id="dir-list">Directory list</td>
  <td>Displays an HTML page that shows a directory index for your site. A sample of a directory list is shown below.<br>
 <img src="../images/directory-index.png" alt="directory index" style="margin: 20px"><br>
    If your site is missing an <code>index.html</code> file, your app displays a directory list instead of the standard 404 error page.</td>
  <td>
   <code>directory: visible</code>
  </td>
</tr>

<tr>
  <td id="ssi">SSI</td>
  <td>Enables Server Side Includes (SSI), which allow you to embed the contents of one or more files into a web page on a web server.
For general information about SSI, see the <a href="https://en.wikipedia.org/wiki/Server_Side_Includes">Server Side Includes</a> entry on Wikipedia.</td>
  <td><code>ssi: enabled</strong></code> </td>
</tr>
<tr>
  <td id="pushstate">Pushstate routing</td>
  <td>Keeps browser-visible URLs clean for client-side JavaScript apps that serve multiple routes.
    For example, pushstate routing allows a single JavaScript file to route to multiple anchor-tagged URLs
    that look like <code>/some/path1</code> instead of <code>/some#path1</code>.
  </td>
  <td><code>pushstate: enabled</code>
  </td>
</tr>

<tr>
  <td id="gzip">GZip file serving and compression</td>
<td>Disables <a href="http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html">gzip_static</a>
and <a href="http://nginx.org/en/docs/http/ngx_http_gunzip_module.html">gunzip</a> modules, which are enabled by default. 
These modules allow NGINX to serve files stored in compressed GZ format and to uncompress them for clients that do not support compressed content or responses.<br><br>You may want to disable compression under particular circumstances such as serving 
content to very old browser clients.</td>
<td><code>gzip: off</code>
</tr>

<tr>
  <td id="basic-auth">Basic authentication</td>
  <td>Allows you to enable basic authentication for your app or website. 
    A sample basic authentication dialog box is shown below:<br><br>
      <img src="../images/basicauth.png"> <br/><br/>
      You can create a hashed username and password pair for each user 
      by using a site like <a href="http://www.htaccesstools.com/htpasswd-generator/">Htpasswd Generator</a></td>
   <td>Add a new <code>Staticfile.auth</code> to the root or alternative root directory. 
    In the new file, add one or more username and password entries using the following format.
  <br>
  <code>USERNAME:HASHED_PASSWORD</code>
  <br><br>For example: 
  <code>
  bob:$apr1$DuUQEQp8$ZccZCHQElNSjrgerwSFC0
  <br>alice:$apr1$4IRQGcD/$UMFLnIHSD9ZHJ86TR4zx</code>
    </td>
</tr>

<tr>
  <td>Proxy support</td>
  <td>Allows you to use a proxy when downloading dependencies during the staging of your app.</td>
  <td><code>http_proxy: HTTP_URL</code><br>
    <code>https_proxy: HTTPS_URL</code>
    <br><br>For example:<br> <code>http_proxy: http://www.example.com/</code>
    <br><code>https_proxy: https://www.example.com/</code></td>
</tr>

<tr>
  <td id="force-https">Force HTTPS</td>
   <td>Forces all requests to be sent through HTTPS.
       This redirects non-HTTPS requests as HTTPS requests.
       <p class="note"><strong>Note</strong>: Do not enable <code>FORCE_HTTPS</code> if you have a 
        proxy server or load balancer that terminates SSL/TLS.
        Doing so can cause infinite redirect loops, for example,
        if you use <a href="https://support.cloudflare.com/hc/en-us/articles/200170416">Flexible SSL</a> with CloudFlare.</p></td>
    <td><code>force_https: true</code><br/><br/>
    Alternatively, set the <code>FORCE_HTTPS</code> environment variable to <code>true</code>.<br></td>
</tr>

<tr>
  <td id="host_dot_files">Dot files</td>
  <td>By default, hidden files, which are those starting with a <code>.</code>, are not served by this buildpack.</td>
  <td><code>host_dot_files: true</code></td>
</tr>

<tr>
  <td id="strict-security">HTTP Strict Transport Security (HSTS)</td>
  <td>Causes NGINX to respond to all requests with the header
 <code>Strict-Transport-Security: max-age=31536000</code>. This forces receiving browsers 
to make all subsequent requests over HTTPS. Defaults to a max-age of one year.
 <p class="note"><strong>Note</strong>: Because this setting persists in browsers for a long time, only enable this setting after you ensure that you have completed the configuration of your app.</p></td>
  <td><code>http_strict_transport_security: true</code></td>
</tr>

<tr>
  <td id="strict-security-with-subdomains">HSTS includes subdomains</td>
  <td>Causes NGINX to respond to all requests with the header
 <code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code>. This forces browsers to make all subsequent requests over HTTPS including subdomains. Defaults to a max-age of one year.
<p class="note"><strong>Note</strong>: Setting this property to <code>true</code> also makes <code>http_strict_transport_security</code> default to true.</p></td>
 <td><code>http_strict_transport_security_include_subdomains: true</code></td>
</tr>

<tr>
  <td id="strict-security-with-preload">HSTS preload</td>
  <td>Causes NGINX to respond to all requests with the header
 <code>Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</code>. This forces browsers to make all subsequent requests over HTTPS including subdomains and requests inclusion in browser-managed HSTS preload lists. For more information, see <a href="https://hstspreload.org">https://hstspreload.org</a>). Defaults to a max-age of one year.
  <p class="note"><strong>Note</strong>: Setting this property to <code>true</code> also makes <code>http_strict_transport_security</code> and <code>http_strict_transport_security_include_subdomains</code> default to true.</p></td>
 <td><code>http_strict_transport_security_preload: true</code></td>
</tr>

<tr>
  <td>Custom location configuration</td>
  <td>Allows you to specify custom location definitions with additional directives.
  For information about NGINX directives, see <a href="https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/">Creating NGINX Plus and NGINX Configuration Files</a> and <a href="https://nginx.org/en/docs/dirindex.html">Alphabetical index of directives</a> in the <i>NGINX documentation</i>.</td>
  <td>
    To customize the <code>location</code> block of the NGINX configuration file, follow these steps:<br><br>
   <ol>
   <li>Set an alternative <code>root</code> directory. The <code>location_include</code> property only works in conjunction with an alternative <code>root</code>.</li>
   <li>Create a file with location-scoped NGINX directives. See the following example, which causes visitors of your site to receive the <code>X-MySiteName</code> HTTP header:
    <br><br>
    <b>File</b>: <code>nginx/conf/includes/custom_header.conf</code><br>
    <b>Content</b>:
    <code>add_header X-MySiteName BestSiteEver;</code><br>
    <li>Set the <code>location_include</code> variable in your <b>Staticfile</b> to the path of 
      the file from the previous step. The path is relative to <code>nginx/conf</code>.<br>
    <pre>
...
root: public
location_include: includes/*.conf
...</pre>
    </li>
  </ol>
</td>
</tr>
<tr>
  <td>Additional MIME type support</td>
  <td>Allows you to configure additional MIME types on your NGINX server. <br><br>
    To add MIME types, add a <code>mime.types</code> file to your root folder, 
    or to the alternate root folder if you specified one.<br><br>
    For more information about the <code>mime.types</code> file, see <a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/#mime-types">Full Example Configuration</a> in the <i>NGINX documentation</i>.</td>
  <td>Sample MIME types file:<br/>
  <pre>
types {
        text/html     html htm shtml;
        text/css      css;
        text/xml      xml rss;
        image/gif     gif;
        ...
      }</pre>
</td>
</tr>
</table>

## <a id='push_app'></a> Pushing the App ###

Follow the steps below to push your application.

1. Create an empty file named `Staticfile` in the root directory of your app:
   
    ```
    touch Staticfile
    ```

1. Modify `Staticfile` for the needs of your app. 
   For a list of configuration options, see [Configuring the Buildpack](#configure).
1. To push your app, run the following command:

    ```
    cf push APP_NAME -m 64M
    ``` 

    Where <code>APP_NAME</code> correponds to the name you want to give your application. 
    For example:<br>
    <pre class='terminal'>
    $ cf push my-app -m 64M
    Creating app my-app in org sample-org / space sample-space as username<span>@</span>example.com...
    OK
    …
    requested state: started
    instances: 1/1
    usage: 64M x 1 instances
    urls: my-app.example.com
    </pre>

1. If you do not have the buildpack, or the installed version is out-of-date, use the <code>-b</code> option to specify the buildpack as follows:

    ```
    cf push APP_NAME -m 64M -b https://github.com/cloudfoundry/staticfile-buildpack.git
    ``` 

    Where <code>APP_NAME</code> correponds to the name you want to give your application. 
1. Find the URL of your app in the output from the push command. For example, the URL in the output above is `my-app.example.com`.
1. In a browser, navigate to the URL to see your static app running.

## <a id='examples'></a>Example Staticfile Buildpack Apps

For different examples of apps that use the Staticfile buildpack, see the [fixtures](https://github.com/cloudfoundry/staticfile-buildpack/tree/master/fixtures) directory in the Staticfile buildpack GitHub repo.

## <a id='help'></a>Help and Support

A number of channels exist where you can get more help when using the Staticfile buildpack, or with developing your own Staticfile buildpack.

* **Staticfile Buildpack Repository in Github**: Find more information about using and extending the Staticfile buildpack in [GitHub repository](https://github.com/cloudfoundry/staticfile-buildpack).

* **Release Notes**: Find current information about this buildpack on the Staticfile buildpack [release page](https://github.com/cloudfoundry/staticfile-buildpack/releases) in GitHub.

* **Slack**: Join the #buildpacks channel in the [Cloud Foundry Slack community](http://slack.cloudfoundry.org/).