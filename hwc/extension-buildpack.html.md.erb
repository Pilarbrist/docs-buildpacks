---
title: Creating an Extension Buildpack for .NET Apps
owner: Buildpacks
---

This topic explains how to write extension buildpacks for .NET apps.

## <a id='prerequisites'></a>Prerequisites

* Linux or MacOS development machine or VM
* [golang](https://golang.org/) v1.10 or later programming language
* [direnv](https://direnv.net/) environment variable manager for your shell

## <a id='initialize'></a>Initialize an Extension Buildpack

The
[buildpack-packager](https://github.com/cloudfoundry/libbuildpack/tree/master/packager/buildpack-packager)
provides boilerplate code that you can use to start writing your buildpack.

1. To install the `buildpack-packager` CLI tool, run the commands below. 

    ```
    go get github.com/cloudfoundry/libbuildpack/
    go install github.com/cloudfoundry/libbuildpack/tree/master/packager
    ```

1. To create your buildpack, run the following command:

    ```
    buildpack-packager init --name BUILDPACK-NAME --path=BUILDPACK-DIRECTORY
    ```
	 Where:
    * `BUILDPACK-NAME` is the name of the buildpack you are creating.
    * `BUILDPACK-DIRECTORY` is the directory created by the command. This directory contains the
      boilerplate code.

    For example:
    <pre class='terminal'>
    $ buildpack-packager init --name my-example --path=my-example-buildpack
    </pre>

1. To activate direnv in your buildpack directory, run the following commands:

    ```
    cd BUILDPACK-DIRECTORY
    direnv allow
    ```

    Where: `BUILDPACK-DIRECTORY` is the directory created by the buildpack-packager command. This directory contains the
      boilerplate code.  

## <a id='create'></a>Create an Extension Buildpack to Supply Additional DLLs to a .NET Framework App

Most .NET Framework apps are pushed with the [Hosted Web Core (HWC) buildpack](../hwc/index.html).
The HWC buildpack contains an opinionated list of .NET dependencies and does not contain all the
DLLs that every app could need.

If your app requires dependencies not contained in the HWC buildpack, we recommend that you create
an extension buildpack. This extension buildpack references and supplies these dependencies to the app's container when you push the app.

<p class='note'><strong>Note:</strong> You cannot add modules or extensions directly to HWC. HWC
contains a number of built-in HWC features, like the URL Rewrite module and HTTP compression.
Extensions should only provide additional functionality to your app. For more information about
existing HWC features, see <a href="../hwc/index.html#features">Features</a> in
<em>HWC Buildpack</em>.</p>

To create an extension buildpack containing additional DLLs, follow the steps below:

1. Create a list of the dependencies that your published app requires.

1. Copy the DLLs for the dependencies into a ZIP file.

1. On the command line, browse to the directory containing the new ZIP file.

1. To generate a SHA for your ZIP file, run the following command:  

    ```
    shasum -a256 DLL-ZIP-FILE
    ```

    Where `DLL-ZIP-FILE` is the name of your DLL ZIP file. 

1. Upload the ZIP file containing your dependencies to a private web server that is accessible by
Cloud Foundry. You can also use an S3 bucket or Azure Storage.

1. On the command line, browse to the directory created by the `buildpack-packager init` command
above.

1. Edit the `manifest.yml` file by adding a `dependency` section that references the DLL ZIP file
as follows:

    ```
    dependencies:
    - name: BINARY-NAME 
      uri: http://s3.amazon.com/BUCKET-NAME/DLL-ZIP-FILE 
      version: 0.0.1
      sha256: GENERATED-SHA-256
      cf_stacks: 
      - windows2016 
    ```
    Where:
    * `BINARY-NAME` is the name of your binary application.
    * `BUCKET-NAME` is your S3 bucket name.
    * `DLL-ZIP-FILE` is the name of your DLL ZIP file.
    * `GENERATED-SHA-256` is the generated SHA.

1. Ensure the `include_files` section of the manifest contains `bin/supply.exe`.

1. To navigate to the BUILDPACK-DIRECTORY/src/BUILDPACK-NAME/ directory, use either Windows Explorer, or your text editor's 'File - Open' option.

1. Edit the supply.go script.  

1. Add dependencies to the container's `PATH` as follows:

    1. Add a `stager.InstallDependency` for the `dependency` and `version` you have in your
    manifest.yml file.

    1. Add a `stager.AddBinDependency` for every DLL file you want your app to be able to access.
    For example:

        ```
        dep := libbuildpack.Dependency{Name: "APP-BINARY", Version: "0.0.1"}
        if err := s.Installer.InstallDependency(dep, s.Stager.DepDir()); err != nil {
          return err
        }
        if err := s.Stager.AddBinDependencyLink(filepath.Join(s.Stager.DepDir(), "APP-BINARY-DLL"), "APP-BINARY-DLL"); err != nil {
          return err
        }
        ```
        Where:  
        * `APP-BINARY` is the name of the application.  
        * `APP-BINARY-DLL` is the filename of the application's DLL.

1. To configure the build.sh script to cross-compile, edit `scripts/build.sh` to include the following:

    ```
    GOOS=windows go build -ldflags="-s -w" -o bin/supply.exe mysql/supply/cli
    ```

## <a id='finish'></a>Complete Extension Buildpack

1. To build a cached buildpack artifact, run the following command:

    ```
    buildpack-packager build -cached -stack STACK-NAME
    ```

    Where:  
    * `STACK-NAME` is the pre-built operating system that can run apps.  

    <p class='note'><strong>Note:</strong> If the buildpack code contains a mistake,
    <code>buildpack-packager</code> throws an error. Once all local errors are corrected, you must
    push your app, with the new extension <code>buildpack</code>, to determine whether the new buildpack
    functions as intended.</p>

1. Upload the buildpack to a private web server accessible to Cloud Foundry. 
You can upload the finished buildpack to the same web server as your dependencies. 
You can also use an S3 bucket or Azure Storage.  

1. To deploy your app with the extension buildpack, run the following command:

    ```
    cf push APP-NAME -s STACK-NAME -b BUILDPACK-URL -b hwc_buildpack
    ```
    Where:
    * `APP-NAME` is your app's name. 
    * `STACK-NAME` is the pre-built operating system that can run apps. 
    * `BUILDPACK-URL` is the URL of the uploaded buildpack zip file.  

    For example:
    <pre class='terminal'>
    $ cf push my-app -s windows2016 -b http<span>:</span>//s3.amazon.com/my-bucket/my-example-buildpack.zip -b hwc_buildpack
    </pre>

If your extension buildpack does not include the correct dependencies, you will receive an error
message.

## <a id='combine'></a>Combine Extension Buildpack with Other Features

If your extension buildpack has executables or scripts that need to be run, you can reference them
either in the start command or in profile scripts.

* For more information about the start command, see
[command](../../devguide/deploy-apps/manifest.html#start-commands) in <em>Deploying with Application Manifests</em>.

* For more information about profile scripts, see
[Configure Pre-Runtime Hooks](../../devguide/deploy-apps/deploy-app.html#profile) in <em>Deploy an Application</em>.
