---
title: NGINX Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

This topic describes how to push your NGINX app to Cloud Foundry and how to configure your NGINX application to use the NGINX buildpack.

## <a id='pushing-apps'></a> Push an App ##

If your app contains an `nginx.conf` file, Cloud Foundry automatically uses the NGINX buildpack when you run `cf push` to deploy your app.

If your Cloud Foundry deployment does not have the NGINX buildpack installed or the installed version is outdated, run `cf push YOUR-APP -b https://github.com/cloudfoundry/nginx-buildpack.git` to deploy your app with the current buildpack. Replace `YOUR-APP` with the name of your app. 

For example:

<pre class="terminal">
$ cf push my-app -b https://github.com/cloudfoundry/nginx-buildpack.git
</pre>

## <a id='nginx'></a> Configure NGINX ##

We recommend that you use the default NGINX directory structure for your NGINX webserver. You can view this directory structure in the [nginx-buildpack](https://github.com/cloudfoundry/nginx-buildpack/tree/master/fixtures/mainline) repository in GitHub.

The NGINX webserver setup includes the following:

* A root folder for all static web content
* A MIME type configuration file
* An NGINX configuration file
* A `buildpacks.yml` YAML file that defines the version of NGINX to use

You should make any custom configuration changes based on these default files to ensure compatibility with the buildpack.

## <a id='templating'></a> Create the nginx.conf File

Use the templating syntax when you create an `nginx.conf` file to use with the NGINX buildpack. This templating syntax loads modules and binds to ports based on values known at launch time.

### <a id='port'></a> Port ###

Use `{{port}}` to set the port to listen on. At launch time, `{{port}}` will interpolate in the value of `$PORT`.

<p class="note"><strong>Note</strong>: You must use <code>{{port}}</code> in your <code>nginx.conf</code> file.</p>

For example, to set an NGINX server to listen on `$PORT`, include the following in your `nginx.conf` file:

```
server {
  listen {{port}};
}
```

### <a id='env'></a> Environment Variables ###

To use an environment variable, include `{{env "YOUR-VARIABLE"}}`. Replace YOUR-VARIABLE with the name of an environment variable. At staging and at launch, the value of the environment variable replaces the template syntax.

For example, include the following in your `nginx.conf` file to enable or disable the GZipping of files served based on the environment variable `GZIP_DOWNLOADS`:

```
gzip {{env "GZIP_DOWNLOADS"}};
```

When you set the environment variable `GZIP_DOWNLOADS` to `off`, NGINX does not GZip files. When you set `GZIP_DOWNLOADS` to `on`, NGINX GZips files served.

### <a id='provided-modules'></a> Buildpack-Provided Modules  ###

The nginx-buildpack v0.0.5 and later include the following built-in module:

* Stream module: `ngx_stream_module.so`

To use a built-in dynamic module, include `{{module "MODULE-FILE-NAME"}}` at the top of your `nginx.conf` file. Replace MODULE-FILE-NAME with the name of the built-in module. 

For example, to use the stream module, include the following at the top of your `nginx.conf` file:

```
{{module "ngx_stream_module"}}
```

## <a id='user-modules'></a> User-Provided Modules ##

Users can supply their own dynamic modules by placing them in the app directory and providing a relative path to the module in the `nginx.conf` file.

To use a user-provided dynamic module, include `load_module PATH-TO-MODULE;` in your `nginx.conf` file. Replace PATH-TO-MODULE with the relative path to the user-provided module.

For example, to use a module named `my_module.so` that is located within the `modules` directory, include the following in your `nginx.conf` file:

```
load_module modules/my_module.so;
```

## <a id='help'></a>Buildpack Support ##

The following resources can assist you when using the NGINX buildpack or when developing your own NGINX buildpack:

* **NGINX Buildpack Repository in Github**: Find more information about using and extending the NGINX buildpack in the [NGINX buildpack](https://github.com/cloudfoundry/nginx-buildpack) GitHub repository.

* **Release Notes**: Find current information about this buildpack on the [NGINX buildpack release page](https://github.com/cloudfoundry/nginx-buildpack/releases) in GitHub.

* **Slack**: Join the #buildpacks channel in the [Cloud Foundry Slack community](http://slack.cloudfoundry.org/).
